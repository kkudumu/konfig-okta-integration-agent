[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "konfig"
version = "0.1.0"
description = "Autonomous AI agent for automating SAML SSO integrations with Okta"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Konfig Team", email = "team@konfig.ai"},
]
keywords = ["saml", "sso", "okta", "automation", "ai-agent"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License", 
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Systems Administration :: Authentication/Directory",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
]
dependencies = [
    "langchain>=0.1.0",
    "langgraph>=0.0.40",
    "langsmith>=0.1.0",
    "openai>=1.12.0",
    "langchain-google-genai>=1.0.0",
    "playwright>=1.40.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "requests>=2.31.0",
    "httpx>=0.27.0",
    "psycopg2-binary>=2.9.9",
    "sqlalchemy>=2.0.25",
    "alembic>=1.13.0",
    "pgvector>=0.2.4",
    "sentence-transformers>=2.2.2",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "cryptography>=41.0.0",
    "hvac>=2.0.0",
    "uvicorn>=0.24.0",
    "fastapi>=0.108.0",
    "jinja2>=3.1.0",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "jupyter>=1.0.0",
]

[project.scripts]
konfig = "konfig.cli:main_cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["konfig*"]

[tool.black]
line-length = 88
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | venv
    | _build
    | buck-out
    | build
    | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["konfig"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["playwright.*", "langgraph.*", "langsmith.*", "pgvector.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=konfig --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["konfig"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]